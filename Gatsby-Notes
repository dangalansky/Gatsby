Gatsby

Create new proj

	1) cd into directory
	2) gatsby new {projectName} {starterURL}
		*visit site for starterURL or else: default

Host from local server

	1) cd into directory
	2) gatsby develop

Setting up Pages

	1) inside pages dir: create pageName.js

	2) get boilerplate: type rafce (react arrow functional component) or similar

	3) format as:

		export default function pageName() {
			return <div>Hello World!</div>
		}

		or as arrow function:

		const pageName = () => {
			return (
				<div>pageName</div>
			);
		}

		export default pageName


	4) *must export default


404 Pages

	1) inside pages dir: create 404.js
	
	2) but cannot use numbers for function names, so name error()

Nested Pages

	1) create new directory inside src/pages

	2) create another index.js (if you want this to be its own page!)

	3) create nested pages inside this directory

Linking Pages

	1) import {Link} from “gatsby”

	2) <Link to=“filpath”>Page Name</Link>

			* “/“ === homepage!

	3) does not refresh upon load!	

	4) only used for internal pages, not external links! 

Navbar

	1) create components directory inside src

	2) create Navbar.js file

	3) import {Link} from “gatsby”

	4) nav > ul > li (etc…)

	5) export default Navbar 

Wrapper Components
	*best used for global components like: navbar, header, footer etc…

	1) wrapper is commonly called Layout.js

	2) import navbar, footer etc…

	3) can use <> </> instead of <div> to keep code clean
		* this is shorthand for React.fragment

	4) inside component: place {children} as props to wrap

	function Layout ({children}) {
		return (
			<>
				<Navbar />
				{children}
				<Footer />
			</>
		);
	}

	5) inside pages: wrap elements inside <Layout />


CSS (inline)

- inline always trumps global

	inline ex) <h1> style={{ color: “green”, textTransform: “capitalize” }} </h1>

CSS (global)

- to import css in react/gatsby, must add extension to import line

	ex) import “./layout.css”

while in development stage: global css will be applied to all pages! 

once deployed: if page does not import layout, styles will not be applied

CSS Modules

	1) create a css file for every page

		ex) home.module.css

		ex) footer.module.css

	2) inside page: import every class listed in css

		import {page, text} from “../css/home.module.css”

	3) OR… import everything like so:

		import * as whateverName from “../css/home.module.css”

		then:

		<div className={whateverName.class}>

	4) copy and paste style sheets to personalize for each page and avoid having to come up with original classNames
