Gatsby

Create new proj

	1) cd into directory
	2) gatsby new {projectName} {starterURL}
		*visit site for starterURL or else: default

Host from local server

	1) cd into directory
	2) gatsby develop

Setting up Pages

	1) inside pages dir: create pageName.js

	2) get boilerplate: type rafce (react arrow functional component) or similar

	3) format as:

		export default function pageName() {
			return <div>Hello World!</div>
		}

		or as arrow function:

		const pageName = () => {
			return (
				<div>pageName</div>
			);
		}

		export default pageName


	4) *must export default


404 Pages

	1) inside pages dir: create 404.js
	
	2) but cannot use numbers for function names, so name error()

Nested Pages

	1) create new directory inside src/pages

	2) create another index.js (if you want this to be its own page!)

	3) create nested pages inside this directory

Linking Pages

	1) import {Link} from “gatsby”

	2) <Link to=“filepath”>Page Name</Link>

			* “/“ === homepage!

	3) does not refresh upon load!	

	4) only used for internal pages, not external links! 

Navbar

	1) create components directory inside src

	2) create Navbar.js file

	3) import {Link} from “gatsby”

	4) nav > ul > li (etc…)

	5) export default Navbar 

Wrapper Components
	*best used for global components like: navbar, header, footer etc…

	1) wrapper is commonly called Layout.js

	2) import navbar, footer etc…

	3) can use <> </> instead of <div> to keep code clean
		* this is shorthand for React.fragment

	4) inside component: place {children} as props to wrap

	function Layout ({children}) {
		return (
			<>
				<Navbar />
				{children}
				<Footer />
			</>
		);
	}

	5) inside pages: wrap elements inside <Layout />


CSS (inline)

- inline always trumps global

	inline ex) <h1> style={{ color: “green”, textTransform: “capitalize” }} </h1>

CSS (global)

* add normalize.css
	-will change css styles for max. compatibility

	1) npm install normalize.css

	2) import “normalize.css”

		—> before main.css!

	3) restart server

- to import css in react/gatsby, must add extension to import line

	ex) import “./layout.css”

while in development stage: global css will be applied to all pages! 

once deployed: if page does not import layout, styles will not be applied


* activeClassName

 - className to add if you want an active link to do something special, like highlight or line-through

CSS Modules

	1) create a css file for every page

		ex) home.module.css

		ex) footer.module.css

	2) inside page: import every class listed in css

		import {page, text} from “../css/home.module.css”

	3) OR… import everything like so:

		import * as whateverName from “../css/home.module.css”

		then:

		<div className={whateverName.class}>

	4) copy and paste style sheets to personalize for each page and avoid having to come up with original classNames


Styled Components (Install)
styled-components.com

 	1) https://www.gatsbyjs.com/plugins/

 	2) search: styled components

	3) run script into project directory

	npm install gatsby-plugin-styled-components styled-components babel-plugin-styled-components

	4) edit gatsby-config.js: add string into plugins array

		plugins: [`gatsby-plugin-styled-components`]

Styled Components (Use)

 	1) import styled from “styled-components”

	2) for a modular component…

		export const Button = styled.button `
			background: green;
			color: orange;
			font-size: 2;
		`;

	3) or use for inside-page styles
		* note: not quotes, use tilda button

		const Wrapper = styled.section `
			color: blue;

			h1 {
				color: yellow;
			}

			.text {
				text-transform: uppercase;
			}
		`;


Images in Gatsby

	1) install plugin: gatsby-plugin-image
	
	2) add strings to plugin array

		`gatsby-plugin-image`,
    		`gatsby-plugin-sharp`,
    		`gatsby-transformer-sharp`,

	3) Static Images:

			* use for hero, about; images that do not change!

		- limitations:
			- cannot pass external props, to effect from another page
			- affecting code must be contained within component!

		a) import {StaticImage} from “gatsby-plugin-image”

		b) export function ImageName() {
				return <StaticImage src=“filepath” alt=“alt name” />
			}

				* src = filepath -or- URL

		c) props

				—> placeholder : what appears before image loads
					
						dominantColor = default
						tracedSVG = better!

				—> layout: how the image responds to container size

						constrained = default, image changes until max size is reached	
		
							*width/height—> define max size, image scales smaller otherwise

							** if inline: value must be contained inside brackets

								ex) height={200}
		
						fixed = image is fixed at max size, will cut off inside container

							*width/height —> define size displayed on screen
						
						fullWidth = image always fills container
	
				—> as: HTML element used as outer wrapper

						div = default

	4) Dynamic Images: GatsbyImage

		* cannot use SVG

		a) set up component to render image(s)

			must import {GatsbyImage} inside component page
	
		b) create query
			
				allFile > nodes > name/childImageSharp > gatsbyImageData 

					options: width (recommended!), layout, placeholder etc…

		c) paste query inside component

		d) reference query, .map() allFile

			const Gallery = () => {
			
				const data = useStaticQuery(query);
				const nodes = data.allFile.nodes;

				return (
					<div>
					{nodes.map((image, index)=>{
						return(
							<article key={index}>
							<GatsbyImage image={nodes.childImageSharp.gatsbyImageData} alt={nodes.name}	 />
							</article>
						)	
					}
					</div>	
				)

		e) import component into page 


	5) getImage: Helper Function!

			* prevents site from breaking based on missing path or file
			
			* pass in path to object where childImageSharp sits

		import {GatsbyImage, getImage} from “gatsby-image-sharp”;


		{nodes.map((image, index) => {
			const imagePath = getImage(image)
			return(
				<GatsbyImage image={imagePath} />
		})

		

		
Hero Setup:

	1) set up static image (see above)

	2) 	<Layout>

			<main className=“page”>

				<header className=“hero”>

					<Image className=“hero-img” layout=“fullWidth”>

						<div className=“hero-container”>

							<div className=“hero-text”>

								<h1> The Heading </h1>
		
								<h4> Sub heading </h4>


	3) The CSS: For text over image!


		.hero-img {
			height: 100%;
			border-radius: ***
		}
			
			* image size is limited by parent “hero”; set to 40% of screen height

		.hero {
			height: 40vh;
			position: relative;
		}

		.hero-container {
			position: absolute;   <— pulls text out of normal flow; spans entirety of hero bc hero= relative
			display: flex;
			width: 100%;
			height: 100%;
			background: rgba(0, 0, 0, 0.4); <- darkens background to pop over image area
			border-radius: ***
		}
			
				—> make sure border-radius of container matches that of image!


GraphQL (Data Fetching)

	in a nutshell:
		1. components want data
		2. use GraphQL to get data
		3. test queries in sandbox
		4. render data using staticquery or pagequery
	
	* GraphiQL === Data querying tool
		
		pulls from: API’s, Headless CMS, JSON, Markdown, SiteMetaData
	
	* 2 types of query
	
		<StaticQuery> - can be used on any component, page or otherwise

		<PageQuery> - only used on pages; can accept variables!

	* query names must be title-cased and unique; syntax as follows…

	const getData = graphql`
		query QueryName { …

	* troubleshooting: if you query name, you might have to clear cache to get results

			—> in terminal : gatsby clean

	—> for sourcing local data/files:
		
		* helpful to point to specific files
			but…you could technically specify all files!
		

		gatsby-source-filesystem
	
		likely inside dependencies, but if not:

		- npm install gatsby-source-filesystem

		* inside gatsby-config.js, under plugins: must set up as an object

		ex) plugins: [
				‘gatsby-transformer-sharp’,
				{
      				resolve: `gatsby-source-filesystem`,
      				options: {
        				name: `images`,
        				path: `${__dirname}/src/assets/images`,
      				},
    				},

			* set up name: can be anything you like
			* set up path: to specific area
		

Writing Queries

	- anatomy of a query:

		* query - title of the object

		* fields - properties of the object

	- allFile: returns an array of a dataset
	
	-file: returns single object; must be constructed to return specific item

	*cntl+space —> give a list of options at any moment

	1) site {}

	2) siteMetadata{}

	3) title, author etc… whatever you want back from query.


Rendering (StaticQuery)

	Manual:

	1) set up query

	2) copy from first “{“

	3) set up component page, must be Title-Cased

	4) import React from “react”
		import { useStaticQuery, graphql } from “gatsby”


		const getData = graphql`
			{
				site {
					siteMetadata {
						author
						title
						description
					}		
				}
			}

		` 

	5) const FetchData = () => {
			const data = useStaticQuery(getData);
			return (
				<div>
					<h1>{data.site.siteMetadata.title}</h1>
				</div>
			)
		}

		export default FetchData;

	6) optional: destructure data variable

			ex) const {
					site: {
						siteMetadata: {title},
					},
				} = useStaticQuery(getData);

				return <div>
					<h2> {title} </h2>
				</div>

	7) or: set up variable as…
	
			const shortCut = data.site.siteMetadata;

			return <div>
						<h2> {shortCut.title} </h2>
					</div>


	Automatic:

	1) set up query

	2) choose code exporter

	3) select StaticQuery hook

	4) copy + paste into component or page 

	5) under return (), render elements by tapping into values from query

		ex) for a simple value

			<div>
				<h2>{data.site.siteMetadata.person.name}</h2>
			</div>

		ex) for complex values, use .map()

			<div>
				{data.site.siteMetadata.complexData.map((item, index) => {
					return (
						<p key={index}> {item.name}:{item.age}</p>
					)
				})}
			</div>

	6) import component into page


Establishing Aliases

	* helpful to refer to long property names

	* use key:value pair syntax

	* must always refer to that property as such!

	ex) inside query:

			site{
				info: siteMetadata {

Establishing Arguments

	* place inside () after property
		
		ex) allFile(limit: 10)

	* can combine arguments for increased specificity 

	1) Limit —> randomly chooses n number of items from subset

	2) Skip —> skips n number of items, returns the rest after

	3) Sort —> by field (name, size, etc.) and order (ascending or descending) 

	4) Filter —> return specific items under restrictions 

				eq: equal	
				ne: not equal

			ex) to return only items within directory: recipes

			(filter: {relativeDirectory: {eq: “recipes”}}) 

	* sourceInstanceName: references “name” property inside filesystem object (gatsby-config)


siteMetadata(SEO)

*inside gatsby-config.js; for SEO purposes
*JSON object

module.exports= {

	siteMetadata: {
		title: “Website Title”,
		description: “A description of the contents/purpose”,
		author: “@NameTagThing
	},

	plugins: []

}

Headless CMS (Contentful)	

	setting up page:

	1) create new space : name of website

	2) content model: add content type
	
			title = name of page 

	3) fields: content type
		
		ex) heading = text, photos = media, cookTime = integer etc…

		* strongly recommended to set up as “required” to avoid future bugs

			validation - required field, limit character count, unique field etc…

	4) name fields in camel-casing like JSON fields

		ex) cookTime, headingTitle … etc

	5) save


	adding content

	1) click to content page 

	2) add entry

	3) fill in established fields

	4) if added JSON field, must insert as JSON object


Connect CMS (Contentful) to Gatsby

	1) install gatsby-source-contentful

	2) setup plugin according to docs

	3) in contentful: setting > api keys

	4) add API key

	5) title and save key

	6) copy + paste spaceID and API (Content Delivery) token


Querying Contentful Data


ENV Variables

 * here’s where you hide your API keys

 visit: https://gatsby.dev/env-vars

—> in Development:
		- variables loaded from : .env.development

		1) in root dir: create file “.env.development”

		2) set up variable

				ex) CONTENTFUL_API_KEY = alsdkfj21209ilskdfasdfads        <— no need for string!

		3) inside gatsby-config.js (at top):

				require("dotenv").config({
  					path: `.env.${process.env.NODE_ENV}`,
				})

		4) inside plugin: 

				accessToken: process.env.CONTENTFUL_API_KEY

—> in Builds:
		-variables loaded from : .env.production

		1) in root dir: create file: “.env.production”

		2) cut and paste from env.development 


—> Lastly:

		inside .gitignore:

		add —> .env*
