Gatsby

Create new proj

	1) cd into directory
	2) gatsby new {projectName} {starterURL}
		*visit site for starterURL or else: default

Host from local server

	1) cd into directory
	2) gatsby develop

Setting up Pages

	1) inside pages dir: create pageName.js

	2) get boilerplate: type rafce (react arrow functional component) or similar

	3) format as:

		export default function pageName() {
			return <div>Hello World!</div>
		}

		or as arrow function:

		const pageName = () => {
			return (
				<div>pageName</div>
			);
		}

		export default pageName


	4) *must export default


404 Pages

	1) inside pages dir: create 404.js
	
	2) but cannot use numbers for function names, so name error()

Nested Pages

	1) create new directory inside src/pages

	2) create another index.js (if you want this to be its own page!)

	3) create nested pages inside this directory

Linking Pages

	1) import {Link} from “gatsby”

	2) <Link to=“filepath”>Page Name</Link>

			* “/“ === homepage!

	3) does not refresh upon load!	

	4) only used for internal pages, not external links! 

Navbar

	1) create components directory inside src

	2) create Navbar.js file

	3) import {Link} from “gatsby”

	4) nav > ul > li (etc…)

	5) export default Navbar 

Wrapper Components
	*best used for global components like: navbar, header, footer etc…

	1) wrapper is commonly called Layout.js

	2) import navbar, footer etc…

	3) can use <> </> instead of <div> to keep code clean
		* this is shorthand for React.fragment

	4) inside component: place {children} as props to wrap

	function Layout ({children}) {
		return (
			<>
				<Navbar />
				{children}
				<Footer />
			</>
		);
	}

	5) inside pages: wrap elements inside <Layout />


CSS (inline)

- inline always trumps global

	inline ex) <h1> style={{ color: “green”, textTransform: “capitalize” }} </h1>

CSS (global)

* add normalize.css
	-will change css styles for max. compatibility

	1) npm install normalize.css

	2) import “normalize.css”

		—> before main.css!

	3) restart server

- to import css in react/gatsby, must add extension to import line

	ex) import “./layout.css”

while in development stage: global css will be applied to all pages! 

once deployed: if page does not import layout, styles will not be applied


* activeClassName

 - className to add if you want an active link to do something special, like highlight or line-through

CSS Modules

	1) create a css file for every page

		ex) home.module.css

		ex) footer.module.css

	2) inside page: import every class listed in css

		import {page, text} from “../css/home.module.css”

	3) OR… import everything like so:

		import * as whateverName from “../css/home.module.css”

		then:

		<div className={whateverName.class}>

	4) copy and paste style sheets to personalize for each page and avoid having to come up with original classNames


Styled Components (Install)
styled-components.com

 	1) https://www.gatsbyjs.com/plugins/

 	2) search: styled components

	3) run script into project directory

	npm install gatsby-plugin-styled-components styled-components babel-plugin-styled-components

	4) edit gatsby-config.js: add string into plugins array

		plugins: [`gatsby-plugin-styled-components`]

Styled Components (Use)

 	1) import styled from “styled-components”

	2) for a modular component…

		export const Button = styled.button `
			background: green;
			color: orange;
			font-size: 2;
		`;

	3) or use for inside-page styles
		* note: not quotes, use tilda button

		const Wrapper = styled.section `
			color: blue;

			h1 {
				color: yellow;
			}

			.text {
				text-transform: uppercase;
			}
		`;


Images in Gatsby

	1) install plugin: gatsby-plugin-image

	2) add strings to plugin array

		`gatsby-plugin-image`,
    		`gatsby-plugin-sharp`,
    		`gatsby-transformer-sharp`,

	3) Static Images:

			* use for hero, about; images that do not change!

		- limitations:
			- cannot pass external props, to effect from another page
			- affecting code must be contained within component!

		a) import {StaticImage} from “gatsby-plugin-image”

		b) export function ImageName() {
				return <StaticImage src=“filepath” alt=“alt name” />
			}

				* src = filepath -or- URL

		c) props

				—> placeholder : what appears before image loads
					
						dominantColor = default
						tracedSVG = better!

				—> layout: how the image responds to container size

						constrained = default, image changes until max size is reached	
		
							*width/height—> define max size, image scales smaller otherwise

							** if inline: value must be contained inside brackets

								ex) height={200}
		
						fixed = image is fixed at max size, will cut off inside container

							*width/height —> define size displayed on screen
						
						fullWidth = image always fills container
	
				—> as: HTML element used as outer wrapper

						div = default
						
					




Hero Setup:

	1) set up static image (see above)

	2) 	<Layout>

			<main className=“page”>

				<header className=“hero”>

					<Image className=“hero-img” layout=“fullWidth”>

						<div className=“hero-container”>

							<div className=“hero-text”>

								<h1> The Heading </h1>
		
								<h4> Sub heading </h4>


	3) The CSS: For text over image!


		.hero-img {
			height: 100%;
			border-radius: ***
		}
			
			* image size is limited by parent “hero”; set to 40% of screen height

		.hero {
			height: 40vh;
			position: relative;
		}

		.hero-container {
			position: absolute;   <— pulls text out of normal flow; spans entirety of hero bc hero= relative
			display: flex;
			width: 100%;
			height: 100%;
			background: rgba(0, 0, 0, 0.4); <- darkens background to pop over image area
			border-radius: ***
		}
			
				—> make sure border-radius of container matches that of image!


